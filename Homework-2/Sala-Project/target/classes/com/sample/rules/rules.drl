//created on: 15 mag 2022
package com.sample.rules

import com.sample.Sala;
import java.util.ArrayList;

import com.sample.Player;

import com.sample.Machine;


//declare any global variables here
//global Sala globalSala;
 
declare String TEXT_RESET = "\u001B[0m";
 String TEXT_BLACK = "\u001B[30m";
 String TEXT_RED = "\u001B[31m";
 String TEXT_GREEN = "\u001B[32m";
 String TEXT_YELLOW = "\u001B[33m";
 String TEXT_BLUE = "\u001B[34m";
 String TEXT_PURPLE = "\u001B[35m";
 String TEXT_CYAN = "\u001B[36m";
 String TEXT_WHITE = "\u001B[37m";


/**
Verify when a player take a jackpot, 
*/
rule "A player do jackpot!"
    when
        $s: Sala ($machines: machines,$players: players, $players.size()>0)
        exists Machine(amount==0.0) from $machines
    then
        //actions
		System.out.println(TEXT_GREEN+ "Something do Jackpot");
end



/**
Check if player lose money and leave it when they lose all money.
*/
rule "A player lose everything"
    //include attributes such as "salience" here...
    when
        //conditions
        
        $s: Sala ($players: players)
        $e: Player(cash==0) from $players
    then
        //actions
        $s.playerLeave($e);
        retract($e)
        System.out.println("A player lose everything!");

end


rule "Player With big amount"
when
	$p:Player(cash >=1000)
then
	System.out.println("One player has a big amount:"+$p.getCash());
end



rule "User Money"
	timer (cron:* 0/3 * * * ?)
	when  
		Sala ($players: players, getMachines().size()>0, getPlayers().size()>0) // Check if there are players to check the property.
		accumulate( Player( $a: cash ) from $players,  // it could be done //$e: Player() from $players
			$max: max( $a ),
			$min: min( $a ),
			$avg: average( $a )
			)
	then
		System.out.println(	"User) - Maximum value of money:" + $max + " Minimum:" + $min + " Averange:" + $avg);		
end





/**
This test is used to give an allarm if there aren't machine in the Sala.
It use the not function
*/
rule "Not Machines!"
	when
	    not Sala ($machines: machines, !$machines.isEmpty())
		//not $machines.size()!=0	
	then
		System.out.println("Sala doesn't have machine!!!");
end

/**
* Check if the Sala is full of positin
*/
rule "Sala Full"
    //include attributes such as "salience" here...
    salience 9
    enabled true
    when
        //conditions
        $s : Sala ($s.getMachines.size()==$s.getPlayers.size() , $s.getMachines.size()>0)
	//	$s.getMachines().size()==$s.getPlayers().size()
    then
        //actions
        System.out.println("Sala Slot full. Nmuber of machines and players "+$s.getMachines().size());
end

rule "step"
	salience 10
	no-loop true
	when
		$s: Sala($players : players)
		$p: Player() from $players
	then
		//$p.decreaseCash();
		int x= (int)Math.floor(Math.random()*(1000-0+1)+0);
		if(x<800) {
			modify(
				$p
			){decreaseCash(), addStep()}
		}else if(x>=900 && x<990) {
			modify(
				$p
			){increaseCash(50), addStep()}
			}else if(x>=990) {
				$p.jackpot();
				$p.addStep();
				update($p);
			}
		$s.addCounter();
		
		
end

rule "Boss lose all reputation"
	agenda-group "bossOwn"
    when
        $s: Sala (getBoss().isFailed())
    then
    	$s.changeBoss();
    	System.out.println("The old boss is failed, Now boss is welcome!");
        //actions

end

rule "Boss with good reputation"
	agenda-group "bossOwn"
    when
        Sala(getBoss().getReputation() >=25.0) 
    then 
    	System.out.println("Boss with good reputation!");
        //actions

end


query "palyer-are-going-toLoseAll"
	Player(cash == 5.0)
end

